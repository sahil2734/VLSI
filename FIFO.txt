Exp no.4- FIFO memory 


library IEEE;

use IEEE.STD_LOGIC_1164.ALL;

use IEEE.STD_LOGIC_ARITH.ALL;

use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity fifo123 is

port (  clk : in std_logic;

          enr : in std_logic;   --enable read,should be '0' when not in use.

          enw : in std_logic;    --enable write,should be '0' when not in use.

          dataout : out std_logic_vector(3 downto 0);    --output data

          datain : in std_logic_vector (3 downto 0);     --input data

          empty : out std_logic;     --set as '1' when the queue is empty

          full : out std_logic     --set as '1' when the queue is full

         );

end fifo123;

architecture Behavioral of fifo123 is

type memory_type is array (0 to 7) of std_logic_vector(3 downto 0);

signal memory : memory_type;-- :=(others => (others => '0'));   --memory for queue.

signal readptr,writeptr : std_logic_vector(3 downto 0):="0000";  --read and write pointers.

begin

process(clk)

begin

		if(clk'event and clk='1' and enw ='1') then

					memory(conv_integer(writeptr)) <= datain;

					writeptr <= writeptr + '1';  --points to next address.

		end if;

		if(clk'event and clk='1' and enr ='1') then

					dataout <= memory(conv_integer(readptr));

					readptr <= readptr + '1';      --points to next address.

		end if;

		if(readptr = "1000") then      --resetting read pointer.

				empty<='1';

				readptr <= "0000";
		else

				empty<='0';

		end if;

		if(writeptr = "1000") then        --checking whether queue is full or not

				full <='1';

				writeptr <= "0000";

		else

				full <='0';
		end if;

end process;  

end Behavioral;
---------------------------------------------------------------TEST BENCh------------------------





















--------------------------------------------------------------------------------
-- Company: 
-- Engineer:
--
-- Create Date:   14:53:40 07/21/2015
-- Design Name:   
-- Module Name:   C:/Xilinx/OR_gate/test_fifo123.vhd
-- Project Name:  OR_gate
-- Target Device:  
-- Tool versions:  
-- Description:   
-- 
-- VHDL Test Bench Created by ISE for module: fifo123
-- 
-- Dependencies:
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Notes: 
-- This testbench has been automatically generated using types std_logic and
-- std_logic_vector for the ports of the unit under test.  Xilinx recommends
-- that these types always be used for the top-level I/O of a design in order
-- to guarantee that the testbench will bind correctly to the post-implementation 
-- simulation model.
--------------------------------------------------------------------------------
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
 
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--USE ieee.numeric_std.ALL;
 
ENTITY test_fifo123 IS
END test_fifo123;
 
ARCHITECTURE behavior OF test_fifo123 IS 
 
    -- Component Declaration for the Unit Under Test (UUT)
 
    COMPONENT fifo123
    PORT(
         clk : IN  std_logic;
         enr : IN  std_logic;
         enw : IN  std_logic;
         dataout : OUT  std_logic_vector(3 downto 0);
         datain : IN  std_logic_vector(3 downto 0);
         empty : OUT  std_logic;
         full : OUT  std_logic
        );
    END COMPONENT;
    

   --Inputs
   signal clk : std_logic := '0';
   signal enr : std_logic := '0';
   signal enw : std_logic := '0';
   signal datain : std_logic_vector(3 downto 0) := (others => '0');

 	--Outputs
   signal dataout : std_logic_vector(3 downto 0);
   signal empty : std_logic;
   signal full : std_logic;

   -- Clock period definitions
   constant clk_period : time := 10 ns;
 
BEGIN
 
	-- Instantiate the Unit Under Test (UUT)
   uut: fifo123 PORT MAP (
          clk => clk,
          enr => enr,
          enw => enw,
          dataout => dataout,
          datain => datain,
          empty => empty,
          full => full
        );

   -- Clock process definitions
   clk_process :process
   begin
		clk <= '1';
		wait for clk_period/2;
		clk <= '0';
		wait for clk_period/2;
   end process;
 

   -- Stimulus process
   stim_proc: process
   begin		
			enw<='1';
			datain<="1110";
      -- hold reset state for 100 ns.
         wait for 10 ns;	
			datain<="1100";
         wait for 10 ns;	
			datain<="1000";
         wait for 10 ns;	
			datain<="0000";
         wait for 10 ns;	
			datain<="1111";
			wait for 10 ns;
			datain<="0000";			
			enw<='0';
		   wait for 10 ns;	
		
			enr<='1';



      -- insert stimulus here 

      wait;
   end process;

END;

